name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

env:
  CLUSTER_NAME: ${{ secrets.GCP_CLUSTER_NAME }}
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: shortlet-cluster
  GKE_ZONE: us-central1

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        export_default_credentials: true
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Configure Docker
      run: |
        gcloud --quiet auth configure-docker

    - name: Build Docker Image
      working-directory: ./app
      run: |
        docker build -t gcr.io/$PROJECT_ID/time-api:$GITHUB_SHA .

    - name: Push Docker Image
      working-directory: ./app
      run: |
        docker push gcr.io/$PROJECT_ID/time-api:$GITHUB_SHA

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'gcr.io/${{ env.PROJECT_ID }}/time-api:${{ github.sha }}'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL'

    - name: Initialize Terraform
      run: |
        echo '${{ secrets.GCP_SA_KEY }}' > gcp-sa-key.json
        export GOOGLE_APPLICATION_CREDENTIALS_DIR=$(pwd)/gcp-sa-key.json
      working-directory: ./terraform

    - name: Initialize Terraform
      run: terraform init
      working-directory: ./terraform

    - name: Format Terraform Configuration
      run: terraform fmt
      working-directory: ./terraform

    - name: Validate Terraform
      run: terraform validate
      working-directory: ./terraform

    - name: Terraform Plan
      working-directory: ./terraform
      run: |
        terraform plan \
          -var="project_id=$PROJECT_ID" \
          -var="time_api_image_tag=$GITHUB_SHA" \
          -var="time_api_cpu_request=100m" \
          -var="time_api_cpu_limit=500m" \
          -var="time_api_memory_request=128Mi" \
          -var="time_api_memory_limit=256Mi" \
          -var="authorized_network=${{ secrets.AUTHORIZED_NETWORK }}" \
          -var="domain=${{ secrets.DOMAIN }}" \
          -var="dns_zone_name=${{ secrets.DNS_ZONE_NAME }}" \
          -var="email=${{ secrets.EMAIL }}" \
          -var="slack_auth_token=${{ secrets.SLACK_AUTH_TOKEN }}" \
          -var="cluster_name=${{ env.CLUSTER_NAME }}" \
          -out=tfplan
    
    - name: Setup Sentinel
      run: |
        wget https://releases.hashicorp.com/sentinel/0.18.4/sentinel_0.18.4_linux_amd64.zip
        unzip sentinel_0.18.4_linux_amd64.zip
        sudo mv sentinel /usr/local/bin/
    
    - name: Run Sentinel
      run: |
        terraform show -json tfplan > tf.json
        sentinel apply -config=sentinel.hcl
        
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      working-directory: ./terraform
      run: terraform apply -auto-approve tfplan
    
    - name: Get GKE Credentials
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $PROJECT_ID

    - name: Get Ingress IP
      run: |
        INGRESS_IP=$(kubectl get ingress time-api-ingress -n time-api -o jsonpath="{.status.loadBalancer.ingress[0].ip}")
        echo "Ingress IP: $INGRESS_IP"

    - name: Test API
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.DOMAIN }})
        if [ $response = "200" ]; then
          echo "API is accessible and returning a 200 status code"
        else
          echo "API is not accessible or not returning a 200 status code"
          exit 1
        fi